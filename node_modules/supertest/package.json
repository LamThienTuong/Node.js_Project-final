{
  "_from": "supertest@3.3.0",
  "_id": "supertest@3.3.0",
  "_inBundle": false,
  "_integrity": "sha512-dMQSzYdaZRSANH5LL8kX3UpgK9G1LRh/jnggs/TI0W2Sz7rkMx9Y48uia3K9NgcaWEV28tYkBnXE4tiFC77ygQ==",
  "_location": "/supertest",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "supertest",
    "fetchSpec": "3.3.0",
    "name": "supertest",
    "raw": "supertest@3.3.0",
    "rawSpec": "3.3.0",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/supertest/-/supertest-3.3.0.tgz",
  "_shasum": "79b27bd7d34392974ab33a31fa51a3e23385987e",
  "_spec": "supertest@3.3.0",
  "_where": "E:\\Git\\Node.js_Project-final",
  "author": {
    "name": "TJ Holowaychuk"
  },
  "bugs": {
    "url": "https://github.com/visionmedia/supertest/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "methods": "^1.1.2",
    "superagent": "^3.8.3"
  },
  "deprecated": false,
  "description": "SuperAgent driven library for testing HTTP servers",
  "devDependencies": {
    "body-parser": "^1.18.3",
    "cookie-parser": "^1.4.3",
    "coveralls": "^3.0.2",
    "eslint": "^5.5.0",
    "eslint-config-airbnb-base": "^13.1.0",
    "eslint-plugin-import": "^2.14.0",
    "express": "^4.16.3",
    "mocha": "^5.2.0",
    "nock": "^9.6.1",
    "nyc": "^13.0.1",
    "should": "^13.2.3"
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "homepage": "https://github.com/visionmedia/supertest#readme",
  "keywords": [
    "bdd",
    "http",
    "request",
    "superagent",
    "tdd",
    "test",
    "testing"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "supertest",
  "optionalDependencies": {},
  "readme": "# SuperTest \n\n[![Coveralls][coverage-badge]][coverage]\n[![Build Status][travis-badge]][travis]\n[![Dependencies][dependencies-badge]][dependencies]\n[![PRs Welcome][prs-badge]][prs]\n[![MIT License][license-badge]][license]\n\n  HTTP assertions made easy via [superagent](http://github.com/visionmedia/superagent).\n\n## About\n\n  The motivation with this module is to provide a high-level abstraction for testing\n  HTTP, while still allowing you to drop down to the [lower-level API](https://visionmedia.github.io/superagent/) provided by superagent.\n\n## Getting Started\n\n  Install SuperTest as an npm module and save it to your package.json file as a development dependency:\n  ```\nnpm install supertest --save-dev\n  ```\n\n  Once installed it can now be referenced by simply calling ```require('supertest');```\n\n## Example\n\n  You may pass an `http.Server`, or a `Function` to `request()` - if the server is not\n  already listening for connections then it is bound to an ephemeral port for you so\n  there is no need to keep track of ports.\n\n  SuperTest works with any test framework, here is an example without using any\n  test framework at all:\n\n```js\nconst request = require('supertest');\nconst express = require('express');\n\nconst app = express();\n\napp.get('/user', function(req, res) {\n  res.status(200).json({ name: 'john' });\n});\n\nrequest(app)\n  .get('/user')\n  .expect('Content-Type', /json/)\n  .expect('Content-Length', '15')\n  .expect(200)\n  .end(function(err, res) {\n    if (err) throw err;\n  });\n```\n\n  Here's an example with mocha, note how you can pass `done` straight to any of the `.expect()` calls:\n\n```js\ndescribe('GET /user', function() {\n  it('respond with json', function(done) {\n    request(app)\n      .get('/user')\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200, done);\n  });\n});\n```\n\nOne thing to note with the above statement is that superagent now sends any HTTP\nerror (anything other than a 2XX response code) to the callback as the first argument if\nyou do not add a status code expect (i.e. `.expect(302)`).\n\n  If you are using the `.end()` method `.expect()` assertions that fail will\n  not throw - they will return the assertion as an error to the `.end()` callback. In\n  order to fail the test case, you will need to rethrow or pass `err` to `done()`, as follows:\n\n```js\ndescribe('POST /users', function() {\n  it('responds with json', function(done) {\n    request(app)\n      .post('/users')\n      .send({name: 'john'})\n      .set('Accept', 'application/json')\n      .expect(200)\n      .end(function(err, res) {\n        if (err) return done(err);\n        done();\n      });\n  });\n});\n```\n\nYou can also use promises\n\n```js\ndescribe('GET /users', function() {\n  it('responds with json', function() {\n    return request(app)\n      .get('/users')\n      .set('Accept', 'application/json')\n      .expect(200)\n      .then(response => {\n          assert(response.body.email, 'foo@bar.com')\n      })\n  });\n});\n```\n\n  Expectations are run in the order of definition. This characteristic can be used\n  to modify the response body or headers before executing an assertion.\n\n```js\ndescribe('POST /user', function() {\n  it('user.name should be an case-insensitive match for \"john\"', function(done) {\n    request(app)\n      .post('/user')\n      .send('name=john') // x-www-form-urlencoded upload\n      .set('Accept', 'application/json')\n      .expect(function(res) {\n        res.body.id = 'some fixed id';\n        res.body.name = res.body.name.toLowerCase();\n      })\n      .expect(200, {\n        id: 'some fixed id',\n        name: 'john'\n      }, done);\n  });\n});\n```\n\nAnything you can do with superagent, you can do with supertest - for example multipart file uploads!\n\n```js\nrequest(app)\n.post('/')\n.field('name', 'my awesome avatar')\n.attach('avatar', 'test/fixtures/avatar.jpg')\n...\n```\n\n  Passing the app or url each time is not necessary, if you're testing\n  the same host you may simply re-assign the request variable with the\n  initialization app or url, a new `Test` is created per `request.VERB()` call.\n\n```js\nrequest = request('http://localhost:5555');\n\nrequest.get('/').expect(200, function(err){\n  console.log(err);\n});\n\nrequest.get('/').expect('heya', function(err){\n  console.log(err);\n});\n```\n  Here's an example with mocha that shows how to persist a request and its cookies:\n\n```js\nconst request = require('supertest');\nconst should = require('should');\nconst express = require('express');\nconst cookieParser = require('cookie-parser');\n\ndescribe('request.agent(app)', function() {\n  const app = express();\n  app.use(cookieParser());\n\n  app.get('/', function(req, res) {\n    res.cookie('cookie', 'hey');\n    res.send();\n  });\n\n  app.get('/return', function(req, res) {\n    if (req.cookies.cookie) res.send(req.cookies.cookie);\n    else res.send(':(')\n  });\n\n  const agent = request.agent(app);\n\n  it('should save cookies', function(done) {\n    agent\n    .get('/')\n    .expect('set-cookie', 'cookie=hey; Path=/', done);\n  });\n\n  it('should send cookies', function(done) {\n    agent\n    .get('/return')\n    .expect('hey', done);\n  });\n})\n```\n  There is another example that is introduced by the file [agency.js](https://github.com/visionmedia/superagent/blob/master/test/node/agency.js)\n\n## API\n\n  You may use any [superagent](http://github.com/visionmedia/superagent) methods,\n  including `.write()`, `.pipe()` etc and perform assertions in the `.end()` callback\n  for lower-level needs.\n\n### .expect(status[, fn])\n\n  Assert response `status` code.\n\n### .expect(status, body[, fn])\n\n  Assert response `status` code and `body`.\n\n### .expect(body[, fn])\n\n  Assert response `body` text with a string, regular expression, or\n  parsed body object.\n\n### .expect(field, value[, fn])\n\n  Assert header `field` `value` with a string or regular expression.\n\n### .expect(function(res) {})\n\n  Pass a custom assertion function. It'll be given the response object to check. If the check fails, throw an error.\n\n  ```js\n  request(app)\n    .get('/')\n    .expect(hasPreviousAndNextKeys)\n    .end(done);\n\n  function hasPreviousAndNextKeys(res) {\n    if (!('next' in res.body)) throw new Error(\"missing next key\");\n    if (!('prev' in res.body)) throw new Error(\"missing prev key\");\n  }\n  ```\n\n### .end(fn)\n\n  Perform the request and invoke `fn(err, res)`.\n\n## Notes\n\n  Inspired by [api-easy](https://github.com/flatiron/api-easy) minus vows coupling.\n\n## License\n\n  MIT\n\n[coverage-badge]: https://coveralls.io/repos/github/visionmedia/supertest/badge.svg?branch=master\n[coverage]: https://coveralls.io/github/visionmedia/supertest?branch=master\n[travis-badge]: https://travis-ci.org/visionmedia/supertest.svg?branch=master\n[travis]: https://travis-ci.org/visionmedia/supertest\n[dependencies-badge]: https://david-dm.org/visionmedia/supertest/status.svg\n[dependencies]: https://david-dm.org/visionmedia/supertest\n[prs-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\n[prs]: http://makeapullrequest.com\n[license-badge]: https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\n[license]: https://github.com/visionmedia/supertest/blob/master/LICENSE\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/visionmedia/supertest.git"
  },
  "scripts": {
    "coverage": "nyc report --reporter=text-lcov | coveralls",
    "pretest": "npm install",
    "test": "eslint lib/**/*.js test/**/*.js index.js && nyc --reporter=html --reporter=text mocha --exit --require should --reporter spec --check-leaks"
  },
  "version": "3.3.0"
}
